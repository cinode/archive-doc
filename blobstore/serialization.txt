Basic serialization rules
+++++++++++++++++++++++++

Blobs use very simple rules for serializing and unserializing
information.

Integer
-------

Integers are stored as a sequence of bytes. Each byte consists
of two parts. The lower 7 bits are made by cutting next 7 bits of
serialized value (starting with lower bits). The eight bit of serialized
byte indicates whether the value encoding need more byte(s). The value of 1
means that at least one more byte is needed, the value of 0 means this is
the last byte of serialized data for this integer. The integer must be
stored using the shortest sequence of bytes. The value can not be padded with
zeroes at the highest bits to increase the length of serialized data.

Here are few examples of data encoding:

=======   ===============    ===============   =====================
Value     Binary value       Encoded form      Binary encoded form
-------   ---------------    ---------------   ---------------------
0x00      000000000          0x00              00000000
0x01      000000001          0x01              00000001
0x7F      001111111          0x7F              01111111
0x80      010000000          0x80 0x01         10000000 00000001
0x131     100110001          0xB1 0x02         10110001 00000010
=======   ===============    ===============   =====================


Data buffer
-----------

Data buffer consists of two parts:

 - integer value indicating the length of buffer in bytes
 - sequence of bytes - the content of a buffer


String
------

String is stored as a data buffer that's an UTF8 representation
of the string.

Array
-----

Data starts with an integer being the number of entries
followed by entries representation (depends on it's type).

Set
---

Similarly to the array, data starts with an integer being the number of entries
followed by entries representation (depends on it's type).


Map
---	

Data starts with an integer being the number of entries
followed by data of each entry. Entry consist
of the data of key followed by the data of value.

