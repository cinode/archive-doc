The security
############

Cinode was built with security in mind. The lack of server side forces us
to use alternative methods for user authorization. The approach that has
been used is based on cryptography.

Every blob in the Cinode network is stored and transferred to other nodes in an
encrypted form. The ability to decrypt this data (knowing the decryption key) equals
a read access.

In addition, each blob reveals extra cryptographic properties similar to
digital signatures. These properties are used
to validate blob and make sure that it's content was created, modified
or simply accepted by an authorized user. Simply put, it's equal to write access
authorization. The creator/modifier/acceptor of the blob must be in a
possession of all information needed to make the blob valid
such as a private key used to sign blob's content.

The blob validation process does not require read access rights
(the data encryption key). By doing so, nodes can safely exchange
blobs between them without revealing the actual blob content. This allows
secure backups, load balancing and blob proxies hosted by 3rd parties.

Selected encryption algorithms
------------------------------

* Default hash - SHA-512
* Default symmetric cipher - AES-256 in CFB chaining mode
* Default asymmetric cipher - RSA using key of 4096 bits

Consideration of quantum cryptography
-------------------------------------

Since algorithms applied in the Cinode may need to stand the test of time,
a quantum cryptography must be taken into account.
Currently known attacks on symmetric ciphers result in reduction of the
algorithm's strengthens by factor of 2 so even if SHA-256 is cracked, it would
have the same strength as SHA-128 which is still fairly good.
The problem that still persists is the ability to break RSA very easily using
quantum computing. For this reason, Cinode should consider using post-quantum
cryptography ciphers such as NTRU in order to prepare for the future.